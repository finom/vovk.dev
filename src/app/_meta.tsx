import type { MetaRecord } from 'nextra';

const separator = (title: string) => ({ type: 'separator', title });

const meta = {
  index: {
    title: 'Home',
    type: 'page',
    theme: {
      layout: 'full',
      toc: false,
      footer: false,
    },
  },
  blog: {
    title: 'Blog',
    href: '/blog',
    type: 'page',
    display: 'hidden',
  },
  '#getting-started': separator('Getting Started'),
  about: 'About',
  concepts: 'Core Concepts',
  'quick-install': 'Quick Install',
  'manual-install': 'Manual Install ğŸš§',
  'hello-world': '"Hello World!" ğŸš§',

  '#common': separator('Common'),
  schema: 'Schema',
  validation: 'Validation',
  inference: 'Type Inference ğŸš§',
  '#server-side': separator('Server-Side'),
  segment: 'Segment',
  controller: 'Controller',
  // 'composed-and-segmented': 'Composed vs Segmented RPC ğŸš§',
  '#typescript': separator('TypeScript Client'),
  typescript: 'TypeScript RPC ğŸš§',
  composed: 'Composed Client ğŸš§',
  segmented: 'Segmented Client ğŸš§',
  imports: 'Library Customization',
  '#client-side': separator('Other Clients'),
  python: 'Python RPC ğŸ§ª ğŸš§',
  rust: 'Rust RPC ğŸ§ª ğŸš§',
  '#cli': separator('Config & CLI'),
  config: 'Config ğŸš§',
  cli: 'CLI ğŸš§',
  bundle: (
    <>
      <code className="nextra-code">vovk bundle ğŸš§</code> (TypeScript)
    </>
  ),
  dev: <code className="nextra-code">vovk dev ğŸš§</code>,
  generate: <code className="nextra-code">vovk generate ğŸš§</code>,
  init: <code className="nextra-code">vovk init ğŸš§</code>,
  new: <code className="nextra-code">vovk new ğŸš§</code>,
  '#etc': separator('etc.'),
  'openapi-mixins': 'OpenAPI Mixins ğŸš§',
  templates: 'Client Templates ğŸš§',
  packages: 'Packages ğŸš§',
  'api-ref': 'API Reference ğŸš§',
  '###': { type: 'separator' },

  '#scenarios': separator('Usage Scenarios'),
  'public-api': 'Public RESTful API ğŸš§',
  saas: 'SaaS framework ğŸš§',
  codegen: 'Code generation ğŸš§',
  nestjs: 'RPC for NestJS ğŸš§',

  '#ai': separator('AI Applications'),
  llm: 'LLM integration ğŸš§',
  'ai-tools': 'AI tools ğŸš§',
  'ai-ui': 'AI-powered UI ğŸ§ª ğŸš§',
  polling: 'Real-time Polling ğŸ§ª ğŸš§',
  mcp: 'MCP Server ğŸš§',

  '#guides': separator('Other Guides'),
  authorization: 'Authorization',
  cron: 'Vercel Cron jobs',
  proxy: 'Proxy endpoints',
  multitenant: 'Multitenancy',
} satisfies MetaRecord;

export default meta;
